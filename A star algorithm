{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<center><h1>Create A* algorithm</h1></center>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 600x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import heapq\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "def heuristic(a, b):\n",
    "    \"\"\"Calculate Manhattan Distance heuristic\"\"\"\n",
    "    return abs(a[0] - b[0]) + abs(a[1] - b[1])\n",
    "\n",
    "def a_star_search(grid, start, goal):\n",
    "    \"\"\"Find shortest path in a 2D grid using A*\"\"\"\n",
    "    rows, cols = len(grid), len(grid[0])\n",
    "    open_set = []\n",
    "    heapq.heappush(open_set, (0, start))\n",
    "    \n",
    "    came_from = {}\n",
    "    g_score = {start: 0}\n",
    "    f_score = {start: heuristic(start, goal)}\n",
    "\n",
    "    while open_set:\n",
    "        _, current = heapq.heappop(open_set)\n",
    "        \n",
    "        if current == goal:\n",
    "            path = []\n",
    "            while current in came_from:\n",
    "                path.append(current)\n",
    "                current = came_from[current]\n",
    "            return path[::-1]  # Return reversed path\n",
    "\n",
    "        x, y = current\n",
    "        for dx, dy in [(-1,0), (1,0), (0,-1), (0,1)]:  # 4-way movement\n",
    "            neighbor = (x + dx, y + dy)\n",
    "            if 0 <= neighbor[0] < rows and 0 <= neighbor[1] < cols and grid[neighbor[0]][neighbor[1]] == 0:\n",
    "                temp_g_score = g_score[current] + 1  # Assume uniform cost\n",
    "\n",
    "                if neighbor not in g_score or temp_g_score < g_score[neighbor]:\n",
    "                    g_score[neighbor] = temp_g_score\n",
    "                    f_score[neighbor] = temp_g_score + heuristic(neighbor, goal)\n",
    "                    heapq.heappush(open_set, (f_score[neighbor], neighbor))\n",
    "                    came_from[neighbor] = current\n",
    "\n",
    "    return None  # No path found\n",
    "\n",
    "def plot_warehouse(grid, path, start, goal):\n",
    "    \"\"\"Plot warehouse grid and shortest path\"\"\"\n",
    "    rows, cols = len(grid), len(grid[0])\n",
    "    grid = np.array(grid)\n",
    "\n",
    "    plt.figure(figsize=(6, 6))\n",
    "    plt.imshow(grid, cmap=\"gray_r\")  # Show grid (black = obstacle, white = free)\n",
    "\n",
    "    # Plot path if found\n",
    "    if path:\n",
    "        x_coords, y_coords = zip(*path)\n",
    "        plt.plot(y_coords, x_coords, color=\"blue\", linewidth=2, marker=\"o\", markersize=5, label=\"Shortest Path\")\n",
    "\n",
    "    # Mark start and goal\n",
    "    plt.scatter(start[1], start[0], color=\"green\", s=100, label=\"Start\")  # Green for Start\n",
    "    plt.scatter(goal[1], goal[0], color=\"red\", s=100, label=\"Goal\")  # Red for Goal\n",
    "\n",
    "    plt.xticks(range(cols))\n",
    "    plt.yticks(range(rows))\n",
    "    plt.grid(True)\n",
    "    plt.legend()\n",
    "    plt.title(\"Warehouse Pathfinding using A* Algorithm\")\n",
    "    plt.show()\n",
    "\n",
    "# Example Warehouse Grid (0 = open, 1 = obstacle)\n",
    "warehouse_grid = [\n",
    "    [0, 0, 0, 1, 0],\n",
    "    [0, 1, 0, 1, 0],\n",
    "    [0, 0, 0, 0, 0],\n",
    "    [1, 1, 0, 1, 0],\n",
    "    [0, 0, 0, 0, 0]\n",
    "]\n",
    "\n",
    "start = (0, 0)  # Starting position\n",
    "goal = (4, 4)   # Goal position\n",
    "\n",
    "# Find shortest path\n",
    "path = a_star_search(warehouse_grid, start, goal)\n",
    "\n",
    "# Visualize result\n",
    "plot_warehouse(warehouse_grid, path, start, goal)\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "conda_tensorflow2_p310",
   "language": "python",
   "name": "conda_tensorflow2_p310"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.16"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
