List1= ["W", "a", "w","b"]

List2 = ["e", "re","riting","log"]

zip_list = zip(List1, List2)

print(zip_list)

for i,j in zip_list:
    print(i+j)
	
--------square of array-------------------------------------------------------------
arr=[1,2,3,4,5]
sq_arr=[]
for i in arr:
    j=i*i
    sq_arr.append(j)
print(sq_arr)

----------Split-----------------------------------------------------------
a="how are you doing"
print(a.split(' '))

['how', 'are', 'you', 'doing']

-----------------------------------------------------------
import numpy as np
x=5
for i in range(2,x):
    print(i)
    if x%i==0:
        print("prime")
        exit()
---------------------------------------------------------------------
import numpy as np

arr1=[1,2]
arr2=[3,4]
arr3=[5,6]

a=np.array([arr1])
b=np.array([arr2])
c=np.array([arr3])

d=np.concatenate((a,b,c),axis=0)

print(d)


[[1 2]
 [3 4]
 [5 6]]
-------ternary operator--------------------------------------------------------------
# 3 arguments
a=10
b=20
c= 30 if a > b else 40
print(c)

--------nested ternary operator-------------------------------------------------------------
a=int(input("enter value of a:"))
b=int(input("enter value of b:"))
c=int(input("enter value of c:"))

#min=a if a<b and a <c else b if b<a and b<c else c
min=a if a<b<c else b if b<c else c
print(min)

-----is operator----------------------------------------------------------------
a=20
b=10
print(a is b)

#false
------in operator---------------------------------------------------------------
a="hello how are you"

print('r' in a)


----bit shift operator-----------------------------------------------------------------
print(10<<2)
#40

10 means ==> 0000001010
shifting by 2 bit means : 0000101000
so answer is 40 

---------------import module------------------------------------------------------
def add(x,y):
	print(x+y)

save above code as dmath.py

now open a new py file and mention below


import dmath
a=10
b=20
dmath.add(a,b)

-------math module--------------------------------------------------------------
from math import *
radius=5

print("area of circle is:",pi*pow(radius,2))


---------------------------------------------------------------------
import math
print(dir(math))


['__doc__', '__loader__', '__name__', '__package__', '__spec__', 'acos', 'acosh', 'asin', 'asinh', 'atan', 'atan2', 'atanh', 'cbrt', 'ceil', 'comb', 'copysign', 'cos', 'cosh', 'degrees', 'dist', 'e', 'erf', 'erfc', 'exp', 'exp2', 'expm1', 'fabs', 'factorial', 'floor', 'fmod', 'frexp', 'fsum', 'gamma', 'gcd', 'hypot', 'inf', 'isclose', 'isfinite', 'isinf', 'isnan', 'isqrt', 'lcm', 'ldexp', 'lgamma', 'log', 'log10', 'log1p', 'log2', 'modf', 'nan', 'nextafter', 'perm', 'pi', 'pow', 'prod', 'radians', 'remainder', 'sin', 'sinh', 'sqrt', 'tan', 'tanh', 'tau', 'trunc', 'ulp']


---------------------------------------------------------------------
from math import *

print(factorial(7))

---------------------------------------------------------------------
import math as m
print(m.sqrt(7))
-----print 2 numbers in 1 line----------------------------------------------------------------
a,b=[int(x) for x in input('Enter 2 numbers:').split()]
 
---------------------------------------------------------------------
x=input('enter anything:')
print(type(x))
enter anything:243
<class 'str'>
---------------------------------------------------------------------
x=eval(input('enter anything:'))
print(type(x))
enter anything:12.2
<class 'float'>


---------------------------------------------------------------------

n=5
for i in range(n):
    print(' '*(n-i+1),end='')
    print('* '*(i+1))


      * 
     * * 
    * * * 
   * * * * 
  * * * * * 

---------------------------------------------------------------------
from sys import argv
print(type(argv))
<class 'list'>
---------------------------------------------------------------------
test.py 10 20 30
argv[0] is test.py
argv[1] is 10
argv[2] is 20
argv[3] is 30
---------------------------------------------------------------------
args=argv[1:]
this will create a list as [10,20,30]
---------------------------------------------------------------------
string='absdf'
print(string.find('s'))

answer is 2
---------------------------------------------------------------------
rfind is reverse find
---------------------------------------------------------------------
find(substring,begin,end)
---------------------------------------------------------------------
s='ABCDE'
print(s.index('B')) 
#1
print(s.index('Z')) 
#value error
---------------------------------------------------------------------
s.count('B')
---------------------------------------------------------------------
string='abcabcabcabd'
print(string.count('abd'))
---------------------------------------------------------------------
s1=s.replace('A','B')
---------------------------------------------------------------------
s.startswith(substring)
s.endswith(substr)
---------------------------------------------------------------------
s.isalpha()
s.isdigit()
s.islower()
-------reverse string--------------------------------------------------------------
s='puneet'
print(s[::-1])
#s[begin:end:step]
---------------------------------------------------------------------
s='puneet'
print(s[8:2:-1])
#tee
---prime or not ------------------------------------------------------------------
n=57
prime_v = 0
for i in range(2,n):
    if n%i==0:
        print("it is non prime and is divisible by:",i)
        prime_v=prime_v+1
        #break

if (prime_v==0):
    print("it is prime number")
---------------------------------------------------------------------
list=eval(input("Enter List:"))
print(list)
print(type(list))
list.append(99)
print(list)


***** New input as List:-
Enter List:[1,2,3,4]
[1, 2, 3, 4]
<class 'list'>
[1, 2, 3, 4, 99]


***** New input as touple:-

Enter List:1,2,3,4
(1, 2, 3, 4)
Traceback (most recent call last):
  File "C:\Users\punbhati\PycharmProjects\BMI_Project_using_Flask\etl sql.py", line 4, in <module>
    list.append(99)
    ^^^^^^^^^^^
AttributeError: 'tuple' object has no attribute 'append'
<class 'tuple'>

Process finished with exit code 1

---------------------------------------------------------------------
list function:-

l=list(range(0,10,3))

print(l)

print(type(l))


[0, 3, 6, 9]
<class 'list'>

Process finished with exit code 0


---------------------------------------------------------------------
l=list(range(0,10,3))
l.append(18)

[0, 3, 6, 9, 18]

---------------------------------------------------------------------
s='puneet'
print(list(s))

['p', 'u', 'n', 'e', 'e', 't']

---------------------------------------------------------------------
s='123456789'
print(list(s))

['1', '2', '3', '4', '5', '6', '7', '8', '9']


s=123456789
print(list(s))
TypeError: 'int' object is not iterable
---------------------------------------------------------------------
s="Learning Python is very very easy !!!"
l=s.split()
print(l)
print(type(l))

['Learning', 'Python', 'is', 'very', 'very', 'easy', '!!!']
<class 'list'>

print(l[3])
very

print(l[-3:])
['very', 'easy', '!!!']
---------------------------------------------------------------------
list2 = list1[start:stop:step]

n=[1,2,3,4,5,6,7,8,9,10] 
print(n[2:7:2])

[3, 5, 7]
---------------------------------------------------------------------
---------------------------------------------------------------------
---------------------------------------------------------------------
---------------------------------------------------------------------
---------------------------------------------------------------------
---------------------------------------------------------------------
---------------------------------------------------------------------
---------------------------------------------------------------------
---------------------------------------------------------------------
---------------------------------------------------------------------
---------------------------------------------------------------------
---------------------------------------------------------------------
---------------------------------------------------------------------
---------------------------------------------------------------------
---------------------------------------------------------------------
---------------------------------------------------------------------
---------------------------------------------------------------------
---------------------------------------------------------------------
---------------------------------------------------------------------
---------------------------------------------------------------------
---------------------------------------------------------------------
---------------------------------------------------------------------
---------------------------------------------------------------------
---------------------------------------------------------------------
---------------------------------------------------------------------
---------------------------------------------------------------------
---------------------------------------------------------------------
---------------------------------------------------------------------
---------------------------------------------------------------------
---------------------------------------------------------------------
---------------------------------------------------------------------
---------------------------------------------------------------------
---------------------------------------------------------------------
---------------------------------------------------------------------
---------------------------------------------------------------------
---------------------------------------------------------------------
---------------------------------------------------------------------
---------------------------------------------------------------------
---------------------------------------------------------------------
---------------------------------------------------------------------
---------------------------------------------------------------------
---------------------------------------------------------------------
---------------------------------------------------------------------
---------------------------------------------------------------------
---------------------------------------------------------------------
---------------------------------------------------------------------
---------------------------------------------------------------------
---------------------------------------------------------------------
---------------------------------------------------------------------
---------------------------------------------------------------------
---------------------------------------------------------------------
---------------------------------------------------------------------
---------------------------------------------------------------------
---------------------------------------------------------------------
---------------------------------------------------------------------
---------------------------------------------------------------------
---------------------------------------------------------------------
---------------------------------------------------------------------
---------------------------------------------------------------------
---------------------------------------------------------------------
---------------------------------------------------------------------
---------------------------------------------------------------------
---------------------------------------------------------------------
---------------------------------------------------------------------
---------------------------------------------------------------------
---------------------------------------------------------------------
---------------------------------------------------------------------
---------------------------------------------------------------------
---------------------------------------------------------------------
---------------------------------------------------------------------
---------------------------------------------------------------------
---------------------------------------------------------------------
---------------------------------------------------------------------
---------------------------------------------------------------------
---------------------------------------------------------------------
---------------------------------------------------------------------
---------------------------------------------------------------------
---------------------------------------------------------------------
---------------------------------------------------------------------
---------------------------------------------------------------------
---------------------------------------------------------------------
---------------------------------------------------------------------
---------------------------------------------------------------------
---------------------------------------------------------------------
---------------------------------------------------------------------
---------------------------------------------------------------------
---------------------------------------------------------------------
---------------------------------------------------------------------
---------------------------------------------------------------------
---------------------------------------------------------------------
